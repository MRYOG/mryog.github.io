<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mryog.github.io</id>
    <title>iRay</title>
    <updated>2024-05-06T07:35:44.008Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mryog.github.io"/>
    <link rel="self" href="https://mryog.github.io/atom.xml"/>
    <subtitle>Get A Life </subtitle>
    <logo>https://mryog.github.io/images/avatar.png</logo>
    <icon>https://mryog.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, iRay</rights>
    <entry>
        <title type="html"><![CDATA[Brotli简单介绍]]></title>
        <id>https://mryog.github.io/brotli-jian-dan-jie-shao/</id>
        <link href="https://mryog.github.io/brotli-jian-dan-jie-shao/">
        </link>
        <updated>2024-05-06T07:16:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="brotli介绍">Brotli介绍</h1>
<p>Brotli 是基于 LZ77 算法的一个现代变体、霍夫曼编码和二阶上下文建模。Google 软件工程师在 2015 年 9 月发布了包含通用无损数据压缩的 Brotli 增强版本，特别侧重于 HTTP 压缩。其中的编码器被部分改写以提高压缩比，编码器和解码器都提高了速度，流式 API 已被改进，增加更多压缩质量级别。<br>
和谷歌的gzip解压缩格式比起来，Brotli能在此基础上将数据在压缩20～25%。它通过一本英语、西班牙语、汉语、印地语、俄语、阿拉伯语的常用字、词汇字典，结合机器语言，特别是HTML和JavaScript的常用术语，能够将数据比gzip, bzip2, LZMA等压缩算法的基础上进一步进行压缩，减少了数据内容的容量大小，使得网页在加载时速度更快。</p>
<h1 id="brotli压缩级别">Brotli压缩级别</h1>
<p>Brotli 有 12 个压缩级别，从 0 到 11，其中 0 提供最快的压缩速度但压缩比最低，而 11 提供最高的压缩比但需要更多的计算资源和时间。<br>
在Cloudflare 使用中提供了CSS文件使用Gzip和Brotli压缩对比<br>
<img src="https://mryog.github.io/post-images/1714980089833.png" alt="" loading="lazy"><br>
通过压缩到 Brotli 11 级，用户可以将文件大小比最佳 Gzip 压缩级别减少 19%。此外，最强的 Brotli 压缩级别比 Cloudflare 默认使用级别将文件大小减少约 18%。这凸显了利用 Brotli 压缩可显著减少文件大小，特别是在其最高级别下，从而提高网站性能、加快页面加载时间并减少总体出站费用。</p>
<h1 id="brotli支持情况">Brotli支持情况</h1>
<p>可通过网站<a href="https://caniuse.com/brotli">caniuse.com</a> 查看浏览器对Brotli支持情况<br>
<img src="https://mryog.github.io/post-images/1714980383057.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS/AnoliOS编译Nginx]]></title>
        <id>https://mryog.github.io/centosanolios-bian-yi-nginx/</id>
        <link href="https://mryog.github.io/centosanolios-bian-yi-nginx/">
        </link>
        <updated>2024-05-06T06:52:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="nginx-介绍">Nginx 介绍</h1>
<p>Nginx是一种流行的开源Web服务器和反向代理服务器。 它的官方网站是<a href="https://nginx.org/">nginx.org</a>，而<a href="https://www.nginx.com/">nginx.com</a>是Nginx软件的商业版本的网站。 nginx.org是Nginx的官方网站，提供了所有版本的Nginx软件的下载，包括稳定版、主线版和开发版。<br>
我们平时还是会使用开源版本，以下为开源版本编译介绍</p>
<h1 id="安装准备">安装准备</h1>
<h2 id="1-官网下载源码">1 官网下载源码</h2>
<p>一般我们会使用Stable version版本的代码<br>
命令：wget https://nginx.org/download/nginx-1.26.0.tar.gz</p>
<h2 id="2-编译库安装">2 编译库安装</h2>
<p>GCC编译器 :  gcc gcc-c++<br>
正则表达式PCRE库 : pcre pcre-devel<br>
zlib压缩库 :  zlib zlib-devel<br>
OpenSSL开发库 : openssl openssl-devel<br>
命令：yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel<br>
如果系统为8以上，也可以使用dnf install -y</p>
<h1 id="开始编译">开始编译</h1>
<pre><code># 创建nginx用户与用户组
groupaddd nginx
useradd -g nginx nginx
#解压nginx源码包并进入nginx源码根目录
[root@localhost ~]# tar -axv -f nginx-1.26.0.tar.gz &amp;&amp; cd nginx-1.26.0

# 1 生成makefile文件
./configure \
--prefix=/etc/nginx \
--sbin-path=/usr/sbin/nginx \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--pid-path=/var/run/nginx.pid \
--lock-path=/var/run/nginx.lock \
--http-client-body-temp-path=/var/cache/nginx/client_temp \
--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
--user=nginx \
--group=nginx \
--with-file-aio \
--with-threads \
--with-http_addition_module \
--with-http_auth_request_module \
--with-http_dav_module \
--with-http_flv_module \
--with-http_gunzip_module \
--with-http_gzip_static_module \
--with-http_mp4_module \
--with-http_random_index_module \
--with-http_realip_module \
--with-http_secure_link_module \
--with-http_slice_module \
--with-http_ssl_module \
--with-http_stub_status_module \
--with-http_sub_module \
--with-http_v2_module \
--with-stream \
--with-stream_realip_module \
--with-stream_ssl_module \
--with-stream_ssl_preread_module 

# 2 编译和安装
make &amp;&amp; make install

# 3 安装成功执行以下命令查看nginx版本号
[root@localhost nginx]# nginx -v
nginx version: nginx/1.26.0

nginx -V 可以看到除了版本之外其他安装模块信息
</code></pre>
<p>如果想在Nginx中使用<a href="https://mryog.github.io/brotli-jian-dan-jie-shao/">brotli压缩</a>，可如下操作</p>
<pre><code># 安装brotli
dnf install -y brotli brotli-devel 或 yum install -y brotli brotli-devel 

# 在编译时，添加brotli模块
./configure \
--prefix=/etc/nginx \
--sbin-path=/usr/sbin/nginx \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--pid-path=/var/run/nginx.pid \
--lock-path=/var/run/nginx.lock \
--http-client-body-temp-path=/var/cache/nginx/client_temp \
--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
--user=nginx \
--group=nginx \
--with-file-aio \
--with-threads \
--with-http_addition_module \
--with-http_auth_request_module \
--with-http_dav_module \
--with-http_flv_module \
--with-http_gunzip_module \
--with-http_gzip_static_module \
--with-http_mp4_module \
--with-http_random_index_module \
--with-http_realip_module \
--with-http_secure_link_module \
--with-http_slice_module \
--with-http_ssl_module \
--with-http_stub_status_module \
--with-http_sub_module \
--with-http_v2_module \
--with-stream \
--with-stream_realip_module \
--with-stream_ssl_module \
--with-stream_ssl_preread_module \
--add-module=/opt/soft/install/ngx_brotli
</code></pre>
<h1 id="添加服务并设置开机启动">添加服务并设置开机启动</h1>
<h2 id="1-服务配置">1、服务配置</h2>
<pre><code>[root@localhost]# vim /usr/lib/systemd/system/nginx.service
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network.target remote-fs.target nss-lookup.target
​
[Service]
Type=forking
PIDFile=/etc/nginx/logs/nginx.pid
ExecStartPre=/etc/nginx/sbin/nginx -t -c /etc/nginx/conf/nginx.conf
ExecStart=/etc/nginx/sbin/nginx -c /etc/nginx/conf/nginx.conf
ExecReload= /etc/nginx/sbin/nginx -s reload
ExecStop= /etc/nginx/sbin/nginx -s stop
PrivateTmp=true
​
[Install]
WantedBy=multi-user.target
</code></pre>
<h2 id="2-设置执行权限">2、设置执行权限</h2>
<p>[root@localhost]# chmod +x /usr/lib/systemd/system/nginx.service</p>
<h2 id="3-服务使用说明">3、服务使用说明</h2>
<p>[root@localhost.com sbin]## systemctl daemon-reload   # 重新加载服务<br>
[root@localhost.com sbin]# systemctl start nginx.service   # 启动<br>
[root@localhost.com sbin]#systemctl stop nginx.service    # 停止<br>
[root@localhost.com sbin]# systemctl reload nginx.service  # 修改配置后重新加载生效<br>
[root@localhost.com sbin]# systemctl restart nginx.service # 重启<br>
[root@localhost.com sbin]# systemctl status nginx   # 查看服务状态</p>
<h2 id="4-设置开机启动">4、设置开机启动</h2>
<p>[root@localhost]# systemctl enable nginx.service</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea介绍使用]]></title>
        <id>https://mryog.github.io/grideaShare/</id>
        <link href="https://mryog.github.io/grideaShare/">
        </link>
        <updated>2024-04-22T08:47:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gridea-介绍">Gridea 介绍</h2>
<p>Gridea 是一款简单、轻量级(小而且美)的博客搭建工具，适合那些喜欢写作并且想要建立自己的博客的人。它的设计理念是提供一个简洁但功能强大的平台，让用户专注于创作内容，而不必担心复杂的技术细节。</p>
<h2 id="gridea-特点">Gridea 特点</h2>
<ol>
<li>离线写作：你可以在离线状态下编写文章，随时随地记录灵感，不需要依赖互联网连接。</li>
<li>Markdown 写作：采用 Markdown 标记语言，让写作变得简单、高效，同时支持代码高亮、数学公式等。</li>
<li>本地存储：所有数据都存储在本地，不依赖于第三方服务器，保护你的隐私和数据安全。</li>
<li>主题和插件支持：Gridea 提供了多种主题和插件，可以根据自己的喜好和需求进行定制和扩展，使博客更加个性化。</li>
<li>多平台同步：支持将文章同步到各种平台，如 GitHub Pages、Gitee pages、Vercel、Netlify 等，让你的博客随时随地都能被访问到。</li>
<li>轻量级、快速部署：Gridea 的客户端非常轻量，下载安装非常迅速，而且部署到各种托管平台也非常简单。</li>
</ol>
<h2 id="gridea-总结">Gridea 总结</h2>
<p>在使用过Ghost,Halo,Wordpress,Hugo等博客系统，最后还是选择了Gridea，他可以当作本地文档，随时查看编辑。也可以随时同步博客，没有hugo的繁琐，但是拥有了hugo维护的简洁。无忧的使用github就好，节省了服务器，如果愿意的话，自己买个域名就可以。省心省力，如官网所说的：写博客的那个劲儿又回来了</p>
<p>Gridea官网：https://gridea.dev/<br>
Gridea开源版本：https://open.gridea.dev/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://mryog.github.io/hello-gridea/</id>
        <link href="https://mryog.github.io/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>